rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 인증된 사용자 확인 함수
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 관리자 확인 함수 (예: 특정 UID를 가진 사용자)
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.uid == 'ADMIN_UID_1' || 
        request.auth.uid == 'ADMIN_UID_2'
      );
    }
    
    // 해당 사용자의 문서인지 확인하는 함수
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // 토너먼트 호스트인지 확인하는 함수
    function isTournamentHost(tournamentId) {
      return isAuthenticated() 
        && exists(/databases/$(database)/documents/tournaments/$(tournamentId))
        && request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.hostId;
    }
    
    // 채팅방 참가자인지 확인하는 함수
    function isChatRoomParticipant(chatRoomId) {
      return isAuthenticated()
        && exists(/databases/$(database)/documents/chatRooms/$(chatRoomId))
        && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds;
    }
    
    // participantIds 배열 변경 시 본인 UID만 조작하는지 확인하는 함수
    function isModifyingOnlyOwnParticipation() {
      let currentParticipantIds = resource.data.participantIds;
      let newParticipantIds = request.resource.data.participantIds;
      
      // arrayUnion 케이스 - 본인 UID만 추가
      let added = newParticipantIds.removeAll(currentParticipantIds);
      
      // arrayRemove 케이스 - 본인 UID만 제거
      let removed = currentParticipantIds.removeAll(newParticipantIds);
      
      return (
        // 추가된 항목이 없거나 본인 UID만 추가
        (added.size() == 0 || (added.size() == 1 && added.hasOnly([request.auth.uid]))) &&
        // 제거된 항목이 없거나 본인 UID만 제거
        (removed.size() == 0 || (removed.size() == 1 && removed.hasOnly([request.auth.uid])))
      );
    }
    
    // 로그인한 사용자만 접근 가능한 기본 규칙
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // 사용자 컬렉션 규칙
    match /users/{userId} {
      // 자신의 사용자 문서는 읽기/쓰기 가능
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 다른 사용자의 문서는 읽기만 가능
      allow read: if request.auth != null;
    }
    
    // 토너먼트 컬렉션 규칙
    match /tournaments/{tournamentId} {
      // 인증된 사용자는 모든 토너먼트 정보를 읽을 수 있음
      allow read: if isAuthenticated();
      
      // 인증된 사용자는 토너먼트 생성 가능
      allow create: if isAuthenticated();
      
      // 토너먼트 업데이트 권한
      // 1. 호스트는 모든 필드 업데이트 가능
      // 2. 일반 사용자는 참가 관련 필드만 업데이트 가능
      // 3. 관리자는 모든 필드 업데이트 가능
      allow update: if isAuthenticated() && (
        resource.data.hostId == request.auth.uid || 
        isAdmin() ||
        (
          // 참가자가 변경할 수 있는 필드 목록
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['participants', 'participantsByRole', 'filledSlots', 'filledSlotsByRole', 'status', 'updatedAt'])
        )
      );
      
      // 삭제는 호스트 또는 관리자만 가능
      allow delete: if isAuthenticated() && (
        resource.data.hostId == request.auth.uid || isAdmin()
      );
    }
    
    // 토너먼트 전체 컬렉션 리스트 쿼리 허용
    match /tournaments {
      allow list: if isAuthenticated();
    }
    
    // 신청 컬렉션 규칙
    match /applications/{applicationId} {
      // 인증된 사용자는 모든 신청서를 읽을 수 있음
      allow read: if isAuthenticated();
      
      // 인증된 사용자는 자신의 신청서만 생성 가능
      allow create: if isAuthenticated() && 
                   request.resource.data.userUid == request.auth.uid;
      
      // 업데이트는 신청자 본인, 토너먼트 호스트, 또는 관리자만 가능
      allow update: if isAuthenticated() && (
        resource.data.userUid == request.auth.uid || 
        isTournamentHost(resource.data.tournamentId) ||
        isAdmin()
      );
      
      // 삭제는 신청자 본인, 토너먼트 호스트, 또는 관리자만 가능
      allow delete: if isAuthenticated() && (
        resource.data.userUid == request.auth.uid || 
        isTournamentHost(resource.data.tournamentId) ||
        isAdmin()
      );
    }
    
    // 용병 컬렉션 규칙
    match /mercenaries/{mercenaryId} {
      // 인증된 사용자는 모든 용병 정보를 읽을 수 있음
      allow read: if isAuthenticated();
      
      // 인증된 사용자는 자신의 용병 프로필만 생성/수정/삭제 가능
      allow create: if isAuthenticated() && 
                   request.resource.data.userUid == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        resource.data.userUid == request.auth.uid || isAdmin()
      );
    }
    
    // 평가 컬렉션 규칙
    match /ratings/{ratingId} {
      // 인증된 사용자는 모든 평가를 읽을 수 있음
      allow read: if isAuthenticated();
      
      // 인증된 사용자는 평가 생성 가능
      allow create: if isAuthenticated() && 
                   request.resource.data.raterId == request.auth.uid;
      
      // 평가 수정/삭제는 평가자 본인 또는 관리자만 가능
      allow update, delete: if isAuthenticated() && (
        resource.data.raterId == request.auth.uid || isAdmin()
      );
    }
    
    // 듀오 찾기 게시글 컬렉션 규칙
    match /duo_posts/{postId} {
      // 로그인한 사용자는 만료되지 않은 게시글 읽기 가능
      allow read: if isAuthenticated();
      
      // 로그인한 사용자는 자신의 게시글만 생성 가능
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      
      // 수정 및 삭제는 비활성화 (추후 필요시 본인만 가능하도록 변경)
      allow update, delete: if false;
    }
    
    // 채팅방 필드 유효성 검증 함수
    function hasValidChatRoomFields() {
      return request.resource.data.keys().hasOnly([
        'title',
        'participantIds',
        'participantNames',
        'participantProfileImages',
        'participantCount',
        'unreadCount',
        'lastMessageText',
        'lastMessageTime',
        'type',
        'tournamentId',
        'createdAt'
      ]);
    }
    
    // 채팅방 컬렉션 규칙
    match /chatRooms/{chatRoomId} {
      // 채팅방 참가자나 관리자만 채팅방 정보 읽기 가능
      allow read: if isChatRoomParticipant(chatRoomId) || isAdmin();
      
      // 인증된 사용자는 채팅방 생성 가능
      allow create: if isAuthenticated();
      
      // 채팅방 업데이트 규칙
      allow update: if hasValidChatRoomFields() && isAuthenticated() && (
        // 관리자는 모든 필드 업데이트 가능
        isAdmin() ||
        
        // 참가자는 제한된 필드만 업데이트 가능
        (request.auth.uid in resource.data.participantIds && (
          // 제목 변경 - 토너먼트 연결된 채팅방에서 참가자 수 변경 시
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title'])) ||
          
          // 본인의 읽지 않은 메시지 수만 업데이트
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['unreadCount']) &&
           request.resource.data.unreadCount.diff(resource.data.unreadCount).affectedKeys().hasOnly([request.auth.uid])) ||
          
          // 마지막 메시지 정보 업데이트 (채팅 전송 시)
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessageText', 'lastMessageTime'])) ||
          
          // 참가자 목록 변경 - 본인만 추가/제거
          (request.resource.data.diff(resource.data).affectedKeys().hasAny(['participantIds', 'participantNames', 'participantProfileImages']) &&
           isModifyingOnlyOwnParticipation()) ||
           
          // participantCount 필드만 업데이트 (increment 연산)
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participantCount']))
        ))
      );
      
      // 삭제는 관리자만 가능
      allow delete: if isAdmin();
    }
    
    // 채팅방 전체 컬렉션 리스트 쿼리 허용 - 본인이 참가한 채팅방만 쿼리 가능
    match /chatRooms {
      allow list: if isAuthenticated() && 
        request.query.where('participantIds', 'array-contains', request.auth.uid);
    }
    
    // 메시지 컬렉션 규칙
    match /messages/{messageId} {
      // 인증된 사용자는 모든 메시지 읽기 가능
      allow read: if isAuthenticated();
      
      // 인증된 사용자는 메시지 생성 가능
      allow create: if isAuthenticated() && (
        // 본인 메시지 생성
        request.resource.data.senderId == request.auth.uid ||
        // 시스템 메시지 생성 (채팅방 참가자만 가능)
        (
          request.resource.data.senderId == 'system' &&
          exists(/databases/$(database)/documents/chatRooms/$(request.resource.data.chatRoomId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(request.resource.data.chatRoomId)).data.participantIds
        )
      );
      
      // 메시지 수정/삭제는 작성자 또는 관리자만 가능
      allow update, delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || isAdmin()
      );
    }
    
    // 클랜 컬렉션 규칙
    match /clans/{clanId} {
      // 모든 로그인 사용자는 클랜 정보를 읽을 수 있음
      // 클랜 멤버만 읽기 가능
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      
      // 클랜 생성은 로그인한 사용자만 가능
      allow create: if request.auth != null && 
                      request.resource.data.ownerId == request.auth.uid;
      
      // 클랜 수정은 소유자만 가능
      allow update: if request.auth != null && 
                      resource.data.ownerId == request.auth.uid;
      
      // 클랜 삭제는 소유자만 가능
      allow delete: if request.auth != null && 
                      resource.data.ownerId == request.auth.uid;
    }
  }
}