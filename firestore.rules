rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 인증된 사용자 확인 함수
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 관리자 확인 함수 (예: 특정 UID를 가진 사용자)
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.uid == 'ADMIN_UID_1' || 
        request.auth.uid == 'ADMIN_UID_2'
      );
    }
    
    // 해당 사용자의 문서인지 확인하는 함수
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // 모든 문서에 대한 기본 규칙
    match /{document=**} {
      // 기본적으로 모든 접근 거부
      allow read, write: if false;
    }
    
    // 사용자 컬렉션 규칙
    match /users/{userId} {
      // 인증된 사용자는 모든 사용자 프로필을 읽을 수 있음
      allow read: if isAuthenticated();
      // 자신의 프로필만 수정 가능
      allow write: if isOwner(userId);
    }
    
    // 토너먼트 컬렉션 규칙
    match /tournaments/{tournamentId} {
      // 인증된 사용자는 모든 토너먼트 정보를 읽을 수 있음
      allow read: if isAuthenticated();
      // 관리자만 토너먼트 생성/수정/삭제 가능
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.hostId == request.auth.uid || isAdmin()
      );
    }
    
    // 신청서 컬렉션 규칙
    match /applications/{applicationId} {
      // 인증된 사용자는 모든 신청서를 읽을 수 있음
      allow read: if isAuthenticated();
      // 인증된 사용자는 신청서 생성 가능, 자신의 신청서만 수정 가능
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }
    
    // 용병 컬렉션 규칙
    match /mercenaries/{mercenaryId} {
      // 인증된 사용자는 모든 용병 정보를 읽을 수 있음
      allow read: if isAuthenticated();
      // 자신의 용병 프로필만 생성/수정/삭제 가능
      allow create, update, delete: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid || isAdmin()
      );
    }
  }
}