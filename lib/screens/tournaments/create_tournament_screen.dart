import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:lol_custom_game_manager/constants/app_theme.dart';
import 'package:lol_custom_game_manager/models/tournament_model.dart';
import 'package:lol_custom_game_manager/models/user_model.dart';
import 'package:lol_custom_game_manager/providers/app_state_provider.dart';
import 'package:lol_custom_game_manager/widgets/loading_indicator.dart';
import 'package:lol_custom_game_manager/widgets/tier_selector.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import 'package:lol_custom_game_manager/constants/lol_constants.dart';

class CreateTournamentScreen extends StatefulWidget {
  const CreateTournamentScreen({Key? key}) : super(key: key);

  @override
  State<CreateTournamentScreen> createState() => _CreateTournamentScreenState();
}

class _CreateTournamentScreenState extends State<CreateTournamentScreen> {
  final _formKey = GlobalKey<FormState>();
  String _autoGeneratedTitle = '랜덤 멸망전';
  final _descriptionController = TextEditingController();
  
  DateTime _selectedDate = DateTime.now().add(const Duration(days: 1));
  TimeOfDay _selectedTime = TimeOfDay.now();
  
  TournamentType _tournamentType = TournamentType.casual;
  
  // 리그 오브 레전드 특화 필드
  GameFormat _gameFormat = GameFormat.single;
  
  // 티어 제한
  PlayerTier _selectedTierLimit = PlayerTier.unranked;
  
  // 주최자 선택 포지션
  String _hostPosition = '';
  
  // 라인별 인원 - 각 2명으로 고정
  final Map<String, int> _slotsByRole = {
    'top': 2,
    'jungle': 2,
    'mid': 2,
    'adc': 2,
    'support': 2,
  };
  
  bool _isLoading = false;
  bool _isMounted = true; // 위젯 마운트 상태 추적
  
  // 롤 포지션 목록
  final List<Map<String, dynamic>> _positions = [
    {'id': 'top', 'name': '탑', 'imagePath': LolLaneIcons.top},
    {'id': 'jungle', 'name': '정글', 'imagePath': LolLaneIcons.jungle},
    {'id': 'mid', 'name': '미드', 'imagePath': LolLaneIcons.mid},
    {'id': 'adc', 'name': '원딜', 'imagePath': LolLaneIcons.adc},
    {'id': 'support', 'name': '서폿', 'imagePath': LolLaneIcons.support},
  ];
  
  @override
  void initState() {
    super.initState();
    // 기본 타이틀 설정 - 티어가 선택되지 않았을 때 기본값
    _updateGeneratedTitle('랜덤 멸망전');
    
    // 현재 시간에서 최소 30분 이후로 초기 시간 설정
    _initializeMinimumFutureTime();
  }
  
  // 현재 시간에서 최소 30분 이후로 시간 설정
  void _initializeMinimumFutureTime() {
    final now = DateTime.now();
    
    // 현재 시간에서 30분 추가
    final minimumTime = now.add(const Duration(minutes: 30));
    
    // 30분 단위로 조정 (30분 또는 정각으로)
    final minute = minimumTime.minute;
    final roundedMinute = minute < 30 ? 30 : 0;
    final hourAdjust = minute < 30 ? 0 : 1;
    
    final adjustedTime = TimeOfDay(
      hour: (minimumTime.hour + hourAdjust) % 24, 
      minute: roundedMinute
    );
    
    setState(() {
      _selectedTime = adjustedTime;
      _selectedDate = DateTime(
        minimumTime.year,
        minimumTime.month,
        minimumTime.day,
        adjustedTime.hour,
        adjustedTime.minute,
      );
    });
  }
  
  // 안전하게 상태 업데이트하는 메서드
  void _updateGeneratedTitle(String title) {
    if (_isMounted) {
      setState(() {
        _autoGeneratedTitle = title;
      });
    }
  }
  
  @override
  void dispose() {
    _descriptionController.dispose();
    _isMounted = false; // 위젯이 해제됨을 표시
    super.dispose();
  }
  
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(
              primary: AppColors.primary,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black,
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: AppColors.primary,
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null && picked != _selectedDate && _isMounted) {
      // 선택한 날짜가 오늘이고, 선택된 시간이 현재 시간으로부터 30분 이내인지 확인
      final now = DateTime.now();
      final isToday = picked.year == now.year && picked.month == now.month && picked.day == now.day;
      
      // 오늘을 선택한 경우, 최소 30분 이후의 시간이 설정되도록 함
      if (isToday) {
        // 최소 30분 이후 시간 계산
        final minimumTime = now.add(const Duration(minutes: 30));
        
        // 선택된 시간이 최소 시간보다 이전인 경우, 최소 시간으로 조정
        final selectedDateTime = DateTime(
          picked.year,
          picked.month,
          picked.day,
          _selectedTime.hour,
          _selectedTime.minute,
        );
        
        if (selectedDateTime.isBefore(minimumTime)) {
          // 30분 단위로 조정
          final minute = minimumTime.minute;
          final roundedMinute = minute < 30 ? 30 : 0;
          final hourAdjust = minute < 30 ? 0 : 1;
          
          final adjustedTime = TimeOfDay(
            hour: (minimumTime.hour + hourAdjust) % 24, 
            minute: roundedMinute
          );
          
          setState(() {
            _selectedTime = adjustedTime;
            _selectedDate = DateTime(
              picked.year,
              picked.month,
              picked.day,
              adjustedTime.hour,
              adjustedTime.minute,
            );
          });
          return;
        }
      }
      
      setState(() {
        _selectedDate = DateTime(
          picked.year,
          picked.month,
          picked.day,
          _selectedTime.hour,
          _selectedTime.minute,
        );
      });
    }
  }
  
  Future<void> _selectTime(BuildContext context) async {
    // 현재 선택된 시간 값을 임시 변수에 저장
    int selectedHour = _selectedTime.hour;
    int selectedMinute = _selectedTime.minute;
    
    // 현재 시간 + 30분 (최소 선택 가능 시간)
    final now = DateTime.now();
    final minimumSelectableTime = now.add(const Duration(minutes: 30));
    final todayDate = DateTime(now.year, now.month, now.day);
    final selectedDay = DateTime(_selectedDate.year, _selectedDate.month, _selectedDate.day);
    final isToday = selectedDay.isAtSameMomentAs(todayDate);
    
    await showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setModalState) {
            return Container(
              padding: const EdgeInsets.only(top: 16, bottom: 32),
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(16),
                  topRight: Radius.circular(16),
                ),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    width: 40,
                    height: 4,
                    margin: const EdgeInsets.only(bottom: 16),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade300,
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          '시간 선택',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          '${selectedHour.toString().padLeft(2, '0')}:${selectedMinute.toString().padLeft(2, '0')}',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: AppColors.primary,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Padding(
                              padding: EdgeInsets.only(left: 20, bottom: 8),
                              child: Text(
                                '시',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black54,
                                ),
                              ),
                            ),
                            SizedBox(
                              height: 300,
                              child: ListView.builder(
                                padding: EdgeInsets.zero,
                                itemCount: 24,
                                itemBuilder: (context, index) {
                                  final hour = index;
                                  // 오늘 날짜를 선택한 경우에만 시간 제한 적용
                                  bool isDisabled = false;
                                  if (isToday) {
                                    // 현재 시간보다 이전 시간은 비활성화
                                    if (hour < minimumSelectableTime.hour) {
                                      isDisabled = true;
                                    } 
                                    // 현재 시간과 같은 경우, 분 조건도 확인
                                    else if (hour == minimumSelectableTime.hour && minimumSelectableTime.minute > 30) {
                                      isDisabled = true;
                                    }
                                  }
                                  
                                  return GestureDetector(
                                    onTap: isDisabled 
                                        ? null 
                                        : () {
                                            setModalState(() {
                                              selectedHour = hour;
                                              
                                              // 오늘이고 선택한 시간이 현재 시간+30분보다 이전인 경우, 분을 자동 조정
                                              if (isToday && hour == minimumSelectableTime.hour && selectedMinute < 30) {
                                                selectedMinute = 30;
                                              }
                                            });
                                          },
                                    child: Container(
                                      width: double.infinity,
                                      height: 56,
                                      margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 16),
                                      decoration: BoxDecoration(
                                        color: selectedHour == hour ? AppColors.primary : Colors.white,
                                        borderRadius: BorderRadius.circular(8),
                                        boxShadow: selectedHour == hour && !isDisabled
                                            ? [
                                                BoxShadow(
                                                  color: AppColors.primary.withOpacity(0.3),
                                                  blurRadius: 8,
                                                  offset: const Offset(0, 2),
                                                ),
                                              ]
                                            : null,
                                        border: selectedHour != hour ? Border.all(color: Colors.grey.shade300) : null,
                                      ),
                                      child: Center(
                                        child: Text(
                                          '${hour.toString().padLeft(2, '0')}시',
                                          style: TextStyle(
                                            color: isDisabled 
                                                ? Colors.grey.shade400 
                                                : (selectedHour == hour ? Colors.white : Colors.black87),
                                            fontSize: 16,
                                            fontWeight: selectedHour == hour ? FontWeight.bold : FontWeight.normal,
                                          ),
                                        ),
                                      ),
                                    ),
                                  );
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Padding(
                              padding: EdgeInsets.only(left: 20, bottom: 8),
                              child: Text(
                                '분',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black54,
                                ),
                              ),
                            ),
                            Column(
                              children: [0, 30].map((minute) {
                                // 오늘 날짜와 현재 시간대를 선택한 경우에만 분 제한 적용
                                bool isDisabled = false;
                                if (isToday && selectedHour == minimumSelectableTime.hour) {
                                  // 현재 분이 30분 이상이면 0분은 선택 불가
                                  if (minimumSelectableTime.minute > 0 && minute == 0) {
                                    isDisabled = true;
                                  }
                                  // 현재 분이 30분 이상이면 30분도 선택 불가
                                  if (minimumSelectableTime.minute > 30 && minute == 30) {
                                    isDisabled = true;
                                  }
                                }
                                
                                return GestureDetector(
                                  onTap: isDisabled 
                                      ? null 
                                      : () {
                                          setModalState(() {
                                            selectedMinute = minute;
                                          });
                                        },
                                  child: Container(
                                    width: double.infinity,
                                    height: 56,
                                    margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 16),
                                    decoration: BoxDecoration(
                                      color: selectedMinute == minute ? AppColors.primary : Colors.white,
                                      borderRadius: BorderRadius.circular(8),
                                      boxShadow: selectedMinute == minute && !isDisabled
                                          ? [
                                              BoxShadow(
                                                color: AppColors.primary.withOpacity(0.3),
                                                blurRadius: 8,
                                                offset: const Offset(0, 2),
                                              ),
                                            ]
                                          : null,
                                      border: selectedMinute != minute ? Border.all(color: Colors.grey.shade300) : null,
                                    ),
                                    child: Center(
                                      child: Text(
                                        '${minute.toString().padLeft(2, '0')}분',
                                        style: TextStyle(
                                          color: isDisabled 
                                              ? Colors.grey.shade400 
                                              : (selectedMinute == minute ? Colors.white : Colors.black87),
                                          fontSize: 16,
                                          fontWeight: selectedMinute == minute ? FontWeight.bold : FontWeight.normal,
                                        ),
                                      ),
                                    ),
                                  ),
                                );
                              }).toList(),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 16, left: 16, right: 16),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          style: TextButton.styleFrom(
                            foregroundColor: Colors.grey.shade700,
                            textStyle: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                          child: const Text('취소'),
                        ),
                        const SizedBox(width: 16),
                        ElevatedButton(
                          onPressed: () {
                            // 확인 버튼을 눌렀을 때만 값 적용
                            setState(() {
                              _selectedTime = TimeOfDay(hour: selectedHour, minute: selectedMinute);
                              _selectedDate = DateTime(
                                _selectedDate.year,
                                _selectedDate.month,
                                _selectedDate.day,
                                selectedHour,
                                selectedMinute,
                              );
                            });
                            Navigator.pop(context);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppColors.primary,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: const Text('확인'),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }
  
  Future<void> _createTournament() async {
    if (!_formKey.currentState!.validate()) return;
    
    // 주최자 포지션이 선택되지 않았을 경우 알림
    if (_hostPosition.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('주최자 포지션을 선택해주세요'),
          backgroundColor: AppColors.error,
        ),
      );
      return;
    }
    
    // 현재 시간보다 최소 30분 이후인지 검증
    final now = DateTime.now();
    final minimumStartTime = now.add(const Duration(minutes: 30));
    
    if (_selectedDate.isBefore(minimumStartTime)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('내전 시작 시간은 현재 시간으로부터 최소 30분 이후여야 합니다'),
          backgroundColor: AppColors.error,
          duration: const Duration(seconds: 3),
          action: SnackBarAction(
            label: '확인',
            textColor: Colors.white,
            onPressed: () {},
          ),
        ),
      );
      return;
    }
    
    final appState = Provider.of<AppStateProvider>(context, listen: false);
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      final tournamentId = await appState.createTournament(
        title: _autoGeneratedTitle,
        location: '한국 서버',
        startsAt: _selectedDate,
        slotsByRole: _slotsByRole,
        tournamentType: _tournamentType,
        tierLimit: _selectedTierLimit,
        description: _descriptionController.text.isNotEmpty ? 
                     _descriptionController.text : '리그 오브 레전드 내전입니다',
        gameFormat: _gameFormat,
        hostPosition: _hostPosition, // 주최자 포지션 추가
      );
      
      if (tournamentId != null && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('내전이 생성되었습니다'),
            backgroundColor: AppColors.success,
          ),
        );
        
        // Navigate to the tournament home screen instead of detail page
        context.go('/tournaments');
      } else if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('내전 생성에 실패했습니다'),
            backgroundColor: AppColors.error,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('내전 생성 중 오류가 발생했습니다: $e'),
            backgroundColor: AppColors.error,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('내전 만들기'),
      ),
      body: _isLoading
          ? const LoadingIndicator()
          : Form(
              key: _formKey,
              child: ListView(
                padding: const EdgeInsets.all(16),
                children: [
                  _buildAutoTitleSection(),
                  const SizedBox(height: 24),
                  _buildDateTimeSection(),
                  const SizedBox(height: 24),
                  _buildGameFormatSection(),
                  const SizedBox(height: 24),
                  _buildTierLimitSection(),
                  const SizedBox(height: 24),
                  _buildHostPositionSection(),
                  const SizedBox(height: 24),
                  _buildPriceSection(),
                  const SizedBox(height: 24),
                  _buildDescriptionSection(),
                  const SizedBox(height: 32),
                  ElevatedButton(
                    onPressed: _createTournament,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.primary,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                    ),
                    child: const Text(
                      '내전 만들기',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
    );
  }
  
  Widget _buildAutoTitleSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '내전 제목',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(4),
            border: Border.all(color: Colors.grey.shade300),
            color: Colors.grey.shade50,
          ),
          child: Text(
            _autoGeneratedTitle,
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey.shade800,
            ),
          ),
        ),
        const SizedBox(height: 8),
        Text(
          '제목은 선택한 티어에 따라 자동으로 생성됩니다',
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey.shade600,
            fontStyle: FontStyle.italic,
          ),
        ),
      ],
    );
  }
  
  Widget _buildDateTimeSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '날짜 및 시간',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        Card(
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: Colors.grey.shade200),
          ),
          child: Column(
            children: [
              InkWell(
                onTap: () => _selectDate(context),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(12),
                  topRight: Radius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: AppColors.primary.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.calendar_today,
                          color: AppColors.primary,
                          size: 24,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              '날짜',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              DateFormat('yyyy년 MM월 dd일 (E)', 'ko_KR').format(_selectedDate),
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Icon(
                        Icons.arrow_forward_ios,
                        size: 16,
                        color: Colors.grey,
                      ),
                    ],
                  ),
                ),
              ),
              Divider(color: Colors.grey.shade200, height: 1),
              InkWell(
                onTap: () => _selectTime(context),
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(12),
                  bottomRight: Radius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: AppColors.primary.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.access_time,
                          color: AppColors.primary,
                          size: 24,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              '시간',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              '${_selectedTime.hour.toString().padLeft(2, '0')}:${_selectedTime.minute.toString().padLeft(2, '0')}',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Icon(
                        Icons.arrow_forward_ios,
                        size: 16,
                        color: Colors.grey,
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
  
  Widget _buildGameFormatSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '경기 방식',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        Row(
          children: [
            _buildGameFormatOption(GameFormat.single, '단판'),
            const SizedBox(width: 12),
            _buildGameFormatOption(GameFormat.bestOfThree, '3판 2선승제'),
          ],
        ),
      ],
    );
  }
  
  Widget _buildGameFormatOption(GameFormat format, String label) {
    final isSelected = _gameFormat == format;
    
    return Expanded(
      child: InkWell(
        onTap: () {
          if (_isMounted) {
            setState(() {
              _gameFormat = format;
            });
          }
        },
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 12),
          decoration: BoxDecoration(
            color: isSelected ? AppColors.primary : Colors.transparent,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: isSelected ? AppColors.primary : Colors.grey.shade300,
              width: 1,
            ),
          ),
          child: Center(
            child: Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: isSelected ? Colors.white : Colors.grey.shade700,
              ),
            ),
          ),
        ),
      ),
    );
  }
  
  Widget _buildTierLimitSection() {
    return TierSelector(
      initialTier: _selectedTierLimit,
      onTierChanged: (tier) {
        if (_isMounted) {
          setState(() {
            _selectedTierLimit = tier;
          });
        }
      },
      onTitleGenerated: (title) {
        _updateGeneratedTitle(title);
      },
    );
  }
  
  // 주최자 포지션 선택 섹션
  Widget _buildHostPositionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '주최자 포지션',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        const Text(
          '내전에서 주최자가 플레이할 포지션을 선택하세요',
          style: TextStyle(
            fontSize: 14,
            color: AppColors.textSecondary,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: _positions.map((position) {
            final isSelected = _hostPosition == position['id'];
            
            return InkWell(
              onTap: () {
                setState(() {
                  _hostPosition = position['id'];
                });
              },
              borderRadius: BorderRadius.circular(8),
              child: Container(
                width: 60,
                height: 70,
                padding: const EdgeInsets.symmetric(vertical: 8),
                decoration: BoxDecoration(
                  color: isSelected ? AppColors.primary.withOpacity(0.2) : Colors.transparent,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: isSelected ? AppColors.primary : Colors.grey.shade300,
                    width: isSelected ? 2 : 1,
                  ),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Image.asset(
                      position['imagePath'],
                      width: 24,
                      height: 24,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      position['name'],
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                        color: isSelected ? AppColors.primary : Colors.grey.shade700,
                      ),
                    ),
                  ],
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
  
  Widget _buildPriceSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '내전 유형',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        _buildTournamentTypeSelector(),
        if (_tournamentType == TournamentType.competitive)
          Column(
            children: [
              const SizedBox(height: 16),
              const SizedBox(height: 8),
              const Text(
                '* 경쟁전은 참가자에게 20 크레딧을 요구합니다. 참가자는 참가 시 크레딧을 소모합니다.\n* 경쟁전은 앱 내 심판 권한이 있는 사용자가 심판을 봐주는 구조입니다.',
                style: TextStyle(
                  fontSize: 12,
                  color: AppColors.textSecondary,
                  fontStyle: FontStyle.italic,
                ),
              ),
            ],
          ),
      ],
    );
  }
  
  Widget _buildTournamentTypeSelector() {
    return Row(
      children: [
        _buildTournamentTypeOption(
          TournamentType.casual, 
          '일반전', 
          '무료로 참가 가능한 일반 내전입니다.',
          Icons.sports_esports,
        ),
        const SizedBox(width: 16),
        _buildTournamentTypeOption(
          TournamentType.competitive, 
          '경쟁전', 
          '참가자는 20 크레딧을 소모하며, 심판이 배정되는 경쟁적인 내전입니다.',
          Icons.emoji_events,
        ),
      ],
    );
  }
  
  Widget _buildTournamentTypeOption(
    TournamentType type, 
    String title, 
    String description, 
    IconData icon,
  ) {
    final isSelected = _tournamentType == type;
    
    return Expanded(
      child: InkWell(
        onTap: () {
          if (_isMounted) {
            setState(() {
              _tournamentType = type;
            });
          }
        },
        borderRadius: BorderRadius.circular(8),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: isSelected ? AppColors.primary.withOpacity(0.1) : Colors.grey.shade100,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: isSelected ? AppColors.primary : Colors.grey.shade300,
              width: isSelected ? 2 : 1,
            ),
          ),
          child: Column(
            children: [
              Icon(
                icon,
                color: isSelected ? AppColors.primary : Colors.grey.shade500,
                size: 32,
              ),
              const SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                  color: isSelected ? AppColors.primary : Colors.grey.shade700,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 12,
                  color: isSelected ? AppColors.primary.withOpacity(0.8) : Colors.grey.shade600,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  Widget _buildDescriptionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '설명',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _descriptionController,
          decoration: const InputDecoration(
            hintText: '내전에 대한 추가 설명을 입력하세요',
            border: OutlineInputBorder(),
          ),
          maxLines: 5,
        ),
      ],
    );
  }
} 