import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:lol_custom_game_manager/constants/app_theme.dart';
import 'package:lol_custom_game_manager/models/tournament_model.dart';
import 'package:lol_custom_game_manager/models/user_model.dart';
import 'package:lol_custom_game_manager/models/clan_model.dart';
import 'package:lol_custom_game_manager/providers/app_state_provider.dart';
import 'package:lol_custom_game_manager/widgets/loading_indicator.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import 'package:lol_custom_game_manager/constants/lol_constants.dart';
import 'package:lol_custom_game_manager/providers/chat_provider.dart';
import 'package:lol_custom_game_manager/services/auth_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class CreateClanTournamentScreen extends StatefulWidget {
  const CreateClanTournamentScreen({Key? key}) : super(key: key);

  @override
  State<CreateClanTournamentScreen> createState() => _CreateClanTournamentScreenState();
}

class _CreateClanTournamentScreenState extends State<CreateClanTournamentScreen> {
  final _formKey = GlobalKey<FormState>();
  String _autoGeneratedTitle = '클랜 대항전';
  final _descriptionController = TextEditingController();
  
  DateTime _selectedDate = DateTime.now().add(const Duration(days: 1));
  TimeOfDay _selectedTime = TimeOfDay.now();
  
  // 클랜 관련 필드
  ClanModel? _userClan; // 사용자의 클랜
  List<UserModel> _clanMembers = []; // 클랜원 목록
  Map<String, List<String>> _selectedClanMembers = { // 포지션별 선택된 클랜원
    'top': [],
    'jungle': [],
    'mid': [],
    'adc': [],
    'support': [],
  };
  
  // 라인별 인원 - 클랜전은 각 1명씩 (5명 팀)
  final Map<String, int> _slotsByRole = {
    'top': 1,
    'jungle': 1,
    'mid': 1,
    'adc': 1,
    'support': 1,
  };
  
  bool _isLoading = false;
  bool _isMounted = true;
  
  // 롤 포지션 목록
  final List<Map<String, dynamic>> _positions = [
    {'id': 'top', 'name': '탑', 'imagePath': LolLaneIcons.top},
    {'id': 'jungle', 'name': '정글', 'imagePath': LolLaneIcons.jungle},
    {'id': 'mid', 'name': '미드', 'imagePath': LolLaneIcons.mid},
    {'id': 'adc', 'name': '원딜', 'imagePath': LolLaneIcons.adc},
    {'id': 'support', 'name': '서폿', 'imagePath': LolLaneIcons.support},
  ];
  
  @override
  void initState() {
    super.initState();
    _initializeMinimumFutureTime();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadUserClanAndMembers();
    });
  }
  
  // 사용자의 클랜과 클랜원 정보 로드
  Future<void> _loadUserClanAndMembers() async {
    if (!mounted) return;
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      final authService = AuthService();
      final appState = Provider.of<AppStateProvider>(context, listen: false);
      
      // 사용자 정보를 새로고침 - getCurrentUserModel이 내부적으로 사용자 정보를 reload 합니다
      final currentUser = await authService.getCurrentUserModel();
      
      debugPrint('클랜전 생성 - 사용자 정보: ${currentUser?.nickname} (${currentUser?.uid})');
      debugPrint('클랜전 생성 - 클랜 ID: ${currentUser?.clanId}');
      
      if (currentUser == null || currentUser.clanId == null) {
        debugPrint('클랜전 생성 - 사용자가 null이거나 클랜 ID가 null입니다.');
        if (mounted) {
          // 더 자세한 정보를 포함한 다이얼로그 표시
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: const Text('클랜 가입 필요'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('클랜전을 만들려면 먼저 클랜에 가입해야 합니다.'),
                  const SizedBox(height: 16),
                  const Text('클랜에 이미 가입했다면 아래 버튼을 눌러 다시 시도해보세요.', 
                    style: TextStyle(fontSize: 12, color: Colors.grey)),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    Navigator.of(context).pop();
                  },
                  child: const Text('확인'),
                ),
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    _loadUserClanAndMembers(); // 다시 시도
                  },
                  child: const Text('다시 시도'),
                ),
              ],
            ),
          );
        }
        return;
      }
      
      // 클랜 정보 로드
      final clanDoc = await FirebaseFirestore.instance
          .collection('clans')
          .doc(currentUser.clanId!)
          .get();
      
      if (!clanDoc.exists) {
        debugPrint('클랜전 생성 - 클랜 문서가 존재하지 않습니다: ${currentUser.clanId}');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('클랜 정보를 찾을 수 없습니다. 클랜 관리자에게 문의하세요.'),
              backgroundColor: Colors.red,
            ),
          );
          Navigator.of(context).pop();
        }
        return;
      }
      
      if (mounted) {
        _userClan = ClanModel.fromFirestore(clanDoc);
        debugPrint('클랜전 생성 - 클랜 정보 로드 완료: ${_userClan?.name}');
        
        // 클랜원 목록 로드
        final memberDocs = await FirebaseFirestore.instance
            .collection('users')
            .where('clanId', isEqualTo: currentUser.clanId)
            .get();
        
        _clanMembers = memberDocs.docs
            .map((doc) => UserModel.fromFirestore(doc))
            .toList();
        
        debugPrint('클랜전 생성 - 클랜원 수: ${_clanMembers.length}');
        
        setState(() {
          _autoGeneratedTitle = '${_userClan?.name} 클랜전';
          _isLoading = false;
        });
      }
    } catch (e) {
      debugPrint('클랜 정보 로드 오류: $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('클랜 정보를 불러오는데 실패했습니다: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
  
  void _initializeMinimumFutureTime() {
    final now = DateTime.now();
    final minimumTime = now.add(const Duration(minutes: 30));
    final minute = minimumTime.minute;
    final roundedMinute = minute < 30 ? 30 : 0;
    final hourAdjust = minute < 30 ? 0 : 1;
    
    final adjustedTime = TimeOfDay(
      hour: (minimumTime.hour + hourAdjust) % 24, 
      minute: roundedMinute
    );
    
    setState(() {
      _selectedTime = adjustedTime;
      _selectedDate = DateTime(
        minimumTime.year,
        minimumTime.month,
        minimumTime.day,
        adjustedTime.hour,
        adjustedTime.minute,
      );
    });
  }
  
  @override
  void dispose() {
    _descriptionController.dispose();
    _isMounted = false;
    super.dispose();
  }
  
  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: true,
      onPopInvoked: (bool didPop) {
        if (!didPop) {
          if (Navigator.of(context).canPop()) {
            Navigator.of(context).pop();
          } else {
            context.go('/main');
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('클랜전 만들기'),
        ),
        body: SafeArea(
          child: _isLoading
              ? const LoadingIndicator()
              : Form(
                  key: _formKey,
                  child: ListView(
                    padding: const EdgeInsets.all(16),
                    children: [
                      if (_userClan != null) _buildClanInfoSection(),
                      if (_userClan != null) const SizedBox(height: 24),
                      _buildTitleSection(),
                      const SizedBox(height: 24),
                      _buildDateTimeSection(),
                      const SizedBox(height: 24),
                      if (_userClan != null) _buildClanMemberSelectionSection(),
                      if (_userClan != null) const SizedBox(height: 24),
                      _buildDescriptionSection(),
                      const SizedBox(height: 32),
                      _buildCreateButton(),
                    ],
                  ),
                ),
        ),
      ),
    );
  }
  
  Widget _buildClanInfoSection() {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(color: Colors.grey.shade200),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: AppColors.primary.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: _userClan?.emblem != null && _userClan!.emblem is String
                  ? ClipRRect(
                      borderRadius: BorderRadius.circular(12),
                      child: Image.network(
                        _userClan!.emblem as String,
                        fit: BoxFit.cover,
                      ),
                    )
                  : Icon(
                      Icons.shield,
                      color: AppColors.primary,
                      size: 30,
                    ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _userClan?.name ?? '알 수 없는 클랜',
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '클랜원 ${_clanMembers.length}명',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildTitleSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '대항전 제목',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(4),
            border: Border.all(color: Colors.grey.shade300),
            color: Colors.grey.shade50,
          ),
          child: Text(
            _autoGeneratedTitle,
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey.shade800,
            ),
          ),
        ),
        const SizedBox(height: 8),
        Text(
          '제목은 클랜명에 따라 자동으로 생성됩니다',
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey.shade600,
            fontStyle: FontStyle.italic,
          ),
        ),
      ],
    );
  }
  
  Widget _buildDateTimeSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '날짜 및 시간',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        Card(
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: Colors.grey.shade200),
          ),
          child: Column(
            children: [
              InkWell(
                onTap: () => _selectDate(context),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(12),
                  topRight: Radius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: AppColors.primary.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.calendar_today,
                          color: AppColors.primary,
                          size: 24,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              '날짜',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              DateFormat('yyyy년 MM월 dd일 (E)', 'ko_KR').format(_selectedDate),
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Icon(
                        Icons.arrow_forward_ios,
                        size: 16,
                        color: Colors.grey,
                      ),
                    ],
                  ),
                ),
              ),
              Divider(color: Colors.grey.shade200, height: 1),
              InkWell(
                onTap: () => _selectTime(context),
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(12),
                  bottomRight: Radius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: AppColors.primary.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.access_time,
                          color: AppColors.primary,
                          size: 24,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              '시간',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              '${_selectedTime.hour.toString().padLeft(2, '0')}:${_selectedTime.minute.toString().padLeft(2, '0')}',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Icon(
                        Icons.arrow_forward_ios,
                        size: 16,
                        color: Colors.grey,
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
  
  Widget _buildClanMemberSelectionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '참가 클랜원 선택',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        const Text(
          '각 포지션별로 참가할 클랜원을 선택해주세요 (팀당 5명)',
          style: TextStyle(
            fontSize: 14,
            color: Colors.grey,
          ),
        ),
        const SizedBox(height: 16),
        // 포지션별 클랜원 선택기들을 표시
        Column(
          children: _positions.map((position) {
            return Container(
              margin: const EdgeInsets.only(bottom: 12),
              child: _buildPositionMemberSelector(position),
            );
          }).toList(),
        ),
        const SizedBox(height: 16),
        // 선택 진행률 표시
        _buildSelectionProgress(),
      ],
    );
  }
  
  Widget _buildPositionMemberSelector(Map<String, dynamic> position) {
    final positionId = position['id'] as String;
    final selectedMembers = _selectedClanMembers[positionId] ?? [];
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Image.asset(
                position['imagePath'],
                width: 24,
                height: 24,
              ),
              const SizedBox(width: 8),
              Text(
                position['name'],
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
              const Spacer(),
              Text(
                '${selectedMembers.length}/1',
                style: TextStyle(
                  fontSize: 14,
                  color: selectedMembers.length == 1 ? AppColors.success : Colors.grey,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          if (selectedMembers.isEmpty)
            InkWell(
              onTap: () => _showMemberSelector(positionId),
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.add, color: Colors.grey),
                    SizedBox(width: 8),
                    Text(
                      '클랜원 선택',
                      style: TextStyle(color: Colors.grey),
                    ),
                  ],
                ),
              ),
            )
          else
            ...selectedMembers.map((memberId) {
              final member = _clanMembers.firstWhere((m) => m.uid == memberId);
              return Container(
                margin: const EdgeInsets.only(bottom: 8),
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: AppColors.primary.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    CircleAvatar(
                      radius: 16,
                      backgroundImage: member.profileImageUrl != null
                          ? NetworkImage(member.profileImageUrl!)
                          : null,
                      child: member.profileImageUrl == null
                          ? const Icon(Icons.person, size: 16)
                          : null,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        member.nickname,
                        style: const TextStyle(fontWeight: FontWeight.w500),
                      ),
                    ),
                    IconButton(
                      onPressed: () {
                        setState(() {
                          _selectedClanMembers[positionId]?.remove(memberId);
                        });
                      },
                      icon: const Icon(Icons.close, size: 16),
                      color: Colors.red,
                    ),
                  ],
                ),
              );
            }).toList(),
        ],
      ),
    );
  }
  
  void _showMemberSelector(String positionId) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${_positions.firstWhere((p) => p['id'] == positionId)['name']} 포지션 클랜원 선택',
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            SizedBox(
              height: 300,
              child: ListView.builder(
                itemCount: _clanMembers.length,
                itemBuilder: (context, index) {
                  final member = _clanMembers[index];
                  final isSelected = _selectedClanMembers[positionId]?.contains(member.uid) ?? false;
                  final isAlreadyAssigned = _selectedClanMembers.values
                      .any((members) => members.contains(member.uid));
                  
                  return ListTile(
                    leading: CircleAvatar(
                      backgroundImage: member.profileImageUrl != null
                          ? NetworkImage(member.profileImageUrl!)
                          : null,
                      child: member.profileImageUrl == null
                          ? const Icon(Icons.person)
                          : null,
                    ),
                    title: Text(member.nickname),
                    subtitle: Text(member.tier.toString().split('.').last),
                    trailing: isSelected
                        ? const Icon(Icons.check_circle, color: AppColors.success)
                        : isAlreadyAssigned
                            ? const Icon(Icons.block, color: Colors.red)
                            : null,
                    enabled: !isAlreadyAssigned || isSelected,
                    onTap: isAlreadyAssigned && !isSelected
                        ? null
                        : () {
                            setState(() {
                              if (isSelected) {
                                _selectedClanMembers[positionId]?.remove(member.uid);
                              } else {
                                _selectedClanMembers[positionId] = [member.uid];
                              }
                            });
                            Navigator.pop(context);
                          },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSelectionProgress() {
    final selectedPositions = _positions.where((position) {
      final positionId = position['id'] as String;
      final selectedMembers = _selectedClanMembers[positionId] ?? [];
      return selectedMembers.isNotEmpty;
    }).length;

    final totalPositions = _positions.length;
    final progress = selectedPositions / totalPositions;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: progress == 1.0 ? AppColors.success.withOpacity(0.1) : Colors.grey.shade50,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: progress == 1.0 ? AppColors.success : Colors.grey.shade300,
        ),
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                '선택 진행률',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: progress == 1.0 ? AppColors.success : Colors.grey[700],
                ),
              ),
              Text(
                '$selectedPositions/$totalPositions',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: progress == 1.0 ? AppColors.success : AppColors.primary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          LinearProgressIndicator(
            value: progress,
            backgroundColor: Colors.grey.shade300,
            valueColor: AlwaysStoppedAnimation<Color>(
              progress == 1.0 ? AppColors.success : AppColors.primary,
            ),
          ),
          if (progress < 1.0) ...[
            const SizedBox(height: 8),
            Text(
              '모든 포지션에 클랜원을 선택해야 클랜전을 생성할 수 있습니다.',
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
              ),
            ),
          ],
        ],
      ),
    );
  }
  

  
  Widget _buildDescriptionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '추가 설명 (선택사항)',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _descriptionController,
          maxLines: 3,
          decoration: InputDecoration(
            hintText: '클랜전에 대한 추가 정보를 입력해주세요',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: AppColors.primary),
            ),
          ),
        ),
      ],
    );
  }
  
  Widget _buildCreateButton() {
    final isFormValid = _validateForm();
    
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: isFormValid && !_isLoading ? _createClanTournament : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.primary,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          elevation: 0,
        ),
        child: _isLoading
            ? const SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              )
            : const Text(
                '클랜전 만들기',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
      ),
    );
  }
  
  bool _validateForm() {
    // 모든 포지션에 클랜원이 선택되었는지 확인
    for (final position in _positions) {
      final positionId = position['id'] as String;
      final selectedMembers = _selectedClanMembers[positionId] ?? [];
      if (selectedMembers.isEmpty) {
        return false;
      }
    }
    return true;
  }
  
  Future<void> _createClanTournament() async {
    if (!_validateForm()) return;
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      final appState = Provider.of<AppStateProvider>(context, listen: false);
      final currentUser = appState.currentUser;
      
      if (currentUser == null) {
        throw Exception('로그인이 필요합니다');
      }
      
      // 선택된 클랜원들로 참가자 목록 구성
      final participants = <String>[];
      final participantsByRole = <String, List<String>>{};
      
      for (final entry in _selectedClanMembers.entries) {
        final position = entry.key;
        final memberIds = entry.value;
        
        participants.addAll(memberIds);
        participantsByRole[position] = List<String>.from(memberIds);
      }
      
      // 클랜전 토너먼트 생성
      final newTournament = await appState.createTournament(
        title: _autoGeneratedTitle,
        location: '한국 서버',
        startsAt: DateTime(
          _selectedDate.year,
          _selectedDate.month,
          _selectedDate.day,
          _selectedTime.hour,
          _selectedTime.minute,
        ),
        slotsByRole: _slotsByRole,
        tournamentType: TournamentType.casual,
        gameCategory: GameCategory.clan,
        tierLimit: PlayerTier.unranked,
        description: _descriptionController.text.isNotEmpty
            ? _descriptionController.text
            : '${_userClan?.name} 클랜전입니다',
      );

      if (!mounted) return;

      if (newTournament != null) {
        final chatProvider = Provider.of<ChatProvider>(context, listen: false);
        await chatProvider.refreshChatRoomsAfterTournamentCreation(newTournament.id);
        
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('클랜전이 생성되었습니다'),
            backgroundColor: AppColors.success,
          ),
        );

        if (mounted) {
          Navigator.of(context).pop(true);
        }
      } else {
        throw Exception('클랜전 생성에 실패했습니다');
      }
    } catch (e) {
      debugPrint('클랜전 생성 오류: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('클랜전 생성 실패: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
  
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(
              primary: AppColors.primary,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black,
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: AppColors.primary,
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null && picked != _selectedDate && _isMounted) {
      // 선택한 날짜가 오늘이고, 선택된 시간이 현재 시간으로부터 30분 이내인지 확인
      final now = DateTime.now();
      final isToday = picked.year == now.year && picked.month == now.month && picked.day == now.day;
      
      // 오늘을 선택한 경우, 최소 30분 이후의 시간이 설정되도록 함
      if (isToday) {
        // 최소 30분 이후 시간 계산
        final minimumTime = now.add(const Duration(minutes: 30));
        
        // 선택된 시간이 최소 시간보다 이전인 경우, 최소 시간으로 조정
        final selectedDateTime = DateTime(
          picked.year,
          picked.month,
          picked.day,
          _selectedTime.hour,
          _selectedTime.minute,
        );
        
        if (selectedDateTime.isBefore(minimumTime)) {
          // 30분 단위로 조정
          final minute = minimumTime.minute;
          final roundedMinute = minute < 30 ? 30 : 0;
          final hourAdjust = minute < 30 ? 0 : 1;
          
          final adjustedTime = TimeOfDay(
            hour: (minimumTime.hour + hourAdjust) % 24, 
            minute: roundedMinute
          );
          
          setState(() {
            _selectedTime = adjustedTime;
            _selectedDate = DateTime(
              picked.year,
              picked.month,
              picked.day,
              adjustedTime.hour,
              adjustedTime.minute,
            );
          });
          return;
        }
      }
      
      setState(() {
        _selectedDate = DateTime(
          picked.year,
          picked.month,
          picked.day,
          _selectedTime.hour,
          _selectedTime.minute,
        );
      });
    }
  }
  
  Future<void> _selectTime(BuildContext context) async {
    // 현재 선택된 시간 값을 임시 변수에 저장
    int selectedHour = _selectedTime.hour;
    int selectedMinute = _selectedTime.minute;
    
    // 현재 시간 + 30분 (최소 선택 가능 시간)
    final now = DateTime.now();
    final minimumSelectableTime = now.add(const Duration(minutes: 30));
    final todayDate = DateTime(now.year, now.month, now.day);
    final selectedDay = DateTime(_selectedDate.year, _selectedDate.month, _selectedDate.day);
    final isToday = selectedDay.isAtSameMomentAs(todayDate);
    
    await showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setModalState) {
            return Container(
              padding: const EdgeInsets.only(top: 16, bottom: 32),
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(16),
                  topRight: Radius.circular(16),
                ),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    width: 40,
                    height: 4,
                    margin: const EdgeInsets.only(bottom: 16),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade300,
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          '시간 선택',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          '${selectedHour.toString().padLeft(2, '0')}:${selectedMinute.toString().padLeft(2, '0')}',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: AppColors.primary,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Padding(
                              padding: EdgeInsets.only(left: 20, bottom: 8),
                              child: Text(
                                '시',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black54,
                                ),
                              ),
                            ),
                            SizedBox(
                              height: 300,
                              child: ListView.builder(
                                padding: EdgeInsets.zero,
                                itemCount: 24,
                                itemBuilder: (context, index) {
                                  final hour = index;
                                  // 오늘 날짜를 선택한 경우에만 시간 제한 적용
                                  bool isDisabled = false;
                                  if (isToday) {
                                    // 현재 시간보다 이전 시간은 비활성화
                                    if (hour < minimumSelectableTime.hour) {
                                      isDisabled = true;
                                    } 
                                    // 현재 시간과 같은 경우, 선택 가능한 분이 있는지 확인
                                    else if (hour == minimumSelectableTime.hour) {
                                      // 30분 단위 중에서 선택 가능한 것이 있는지 확인
                                      bool hasValidMinute = false;
                                      for (int minute in [0, 30]) {
                                        final testDateTime = DateTime(
                                          _selectedDate.year,
                                          _selectedDate.month,
                                          _selectedDate.day,
                                          hour,
                                          minute,
                                        );
                                        if (!testDateTime.isBefore(minimumSelectableTime)) {
                                          hasValidMinute = true;
                                          break;
                                        }
                                      }
                                      if (!hasValidMinute) {
                                        isDisabled = true;
                                      }
                                    }
                                  }
                                  
                                  return GestureDetector(
                                    onTap: isDisabled 
                                        ? null 
                                        : () {
                                            setModalState(() {
                                              selectedHour = hour;
                                              
                                              // 오늘이고 선택한 시간이 현재 시간+30분보다 이전인 경우, 분을 자동 조정
                                              if (isToday) {
                                                final testDateTime = DateTime(
                                                  _selectedDate.year,
                                                  _selectedDate.month,
                                                  _selectedDate.day,
                                                  hour,
                                                  selectedMinute,
                                                );
                                                if (testDateTime.isBefore(minimumSelectableTime)) {
                                                  // 선택한 시간에서 가능한 가장 가까운 30분 단위 찾기
                                                  bool foundValidMinute = false;
                                                  for (int minute in [0, 30]) {
                                                    final candidateDateTime = DateTime(
                                                      _selectedDate.year,
                                                      _selectedDate.month,
                                                      _selectedDate.day,
                                                      hour,
                                                      minute,
                                                    );
                                                    if (!candidateDateTime.isBefore(minimumSelectableTime)) {
                                                      selectedMinute = minute;
                                                      foundValidMinute = true;
                                                      break;
                                                    }
                                                  }
                                                  // 현재 시간에서 가능한 분이 없으면 다음 시간으로
                                                  if (!foundValidMinute) {
                                                    selectedMinute = 0;
                                                    selectedHour = (selectedHour + 1) % 24;
                                                  }
                                                }
                                              }
                                            });
                                          },
                                    child: Container(
                                      width: double.infinity,
                                      height: 56,
                                      margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 16),
                                      decoration: BoxDecoration(
                                        color: selectedHour == hour ? AppColors.primary : Colors.white,
                                        borderRadius: BorderRadius.circular(8),
                                        boxShadow: selectedHour == hour && !isDisabled
                                            ? [
                                                BoxShadow(
                                                  color: AppColors.primary.withOpacity(0.3),
                                                  blurRadius: 8,
                                                  offset: const Offset(0, 2),
                                                ),
                                              ]
                                            : null,
                                        border: selectedHour != hour ? Border.all(color: Colors.grey.shade300) : null,
                                      ),
                                      child: Center(
                                        child: Text(
                                          '${hour.toString().padLeft(2, '0')}시',
                                          style: TextStyle(
                                            color: isDisabled 
                                                ? Colors.grey.shade400 
                                                : (selectedHour == hour ? Colors.white : Colors.black87),
                                            fontSize: 16,
                                            fontWeight: selectedHour == hour ? FontWeight.bold : FontWeight.normal,
                                          ),
                                        ),
                                      ),
                                    ),
                                  );
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Padding(
                              padding: EdgeInsets.only(left: 20, bottom: 8),
                              child: Text(
                                '분',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black54,
                                ),
                              ),
                            ),
                            Column(
                              children: [0, 30].map((minute) {
                                // 오늘 날짜를 선택한 경우에만 분 제한 적용
                                bool isDisabled = false;
                                if (isToday) {
                                  // 선택하려는 시간이 최소 선택 가능 시간보다 이전인지 확인
                                  final testDateTime = DateTime(
                                    _selectedDate.year,
                                    _selectedDate.month,
                                    _selectedDate.day,
                                    selectedHour,
                                    minute,
                                  );
                                  if (testDateTime.isBefore(minimumSelectableTime)) {
                                    isDisabled = true;
                                  }
                                }
                                
                                return GestureDetector(
                                  onTap: isDisabled 
                                      ? null 
                                      : () {
                                          setModalState(() {
                                            selectedMinute = minute;
                                          });
                                        },
                                  child: Container(
                                    width: double.infinity,
                                    height: 56,
                                    margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 16),
                                    decoration: BoxDecoration(
                                      color: selectedMinute == minute ? AppColors.primary : Colors.white,
                                      borderRadius: BorderRadius.circular(8),
                                      boxShadow: selectedMinute == minute && !isDisabled
                                          ? [
                                              BoxShadow(
                                                color: AppColors.primary.withOpacity(0.3),
                                                blurRadius: 8,
                                                offset: const Offset(0, 2),
                                              ),
                                            ]
                                          : null,
                                      border: selectedMinute != minute ? Border.all(color: Colors.grey.shade300) : null,
                                    ),
                                    child: Center(
                                      child: Text(
                                        '${minute.toString().padLeft(2, '0')}분',
                                        style: TextStyle(
                                          color: isDisabled 
                                              ? Colors.grey.shade400 
                                              : (selectedMinute == minute ? Colors.white : Colors.black87),
                                          fontSize: 16,
                                          fontWeight: selectedMinute == minute ? FontWeight.bold : FontWeight.normal,
                                        ),
                                      ),
                                    ),
                                  ),
                                );
                              }).toList(),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 16, left: 16, right: 16),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          style: TextButton.styleFrom(
                            foregroundColor: Colors.grey.shade700,
                            textStyle: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                          child: const Text('취소'),
                        ),
                        const SizedBox(width: 16),
                        ElevatedButton(
                          onPressed: () {
                            // 확인 버튼을 눌렀을 때만 값 적용
                            setState(() {
                              _selectedTime = TimeOfDay(hour: selectedHour, minute: selectedMinute);
                              _selectedDate = DateTime(
                                _selectedDate.year,
                                _selectedDate.month,
                                _selectedDate.day,
                                selectedHour,
                                selectedMinute,
                              );
                            });
                            Navigator.pop(context);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppColors.primary,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: const Text('확인'),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }
} 